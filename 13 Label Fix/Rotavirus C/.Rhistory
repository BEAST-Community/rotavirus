library("ape")
seq <- read.dna("NSP1C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
#names(seq)
base <- read.dna("NSP1Cr.fas",format="fasta",as.matrix=FALSE)
#names(base)
i=1
sametitle <- match(names(base),names(seq))
while (i < 101)
{
if (is.element(i, sametitle) == FALSE)
{
names(seq)[i] <- names(base)[grep(names(seq)[i],names(base))]
}
i = i + 1
}
write.dna(seq, "NSP1C.fas.labelfixed.longseq", format = "fasta")
library("ape")
seq <- read.dna("NSP2C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
#names(seq)
base <- read.dna("NSP2Cr.fas",format="fasta",as.matrix=FALSE)
#names(base)
i=1
sametitle <- match(names(base),names(seq))
while (i < 101)
{
if (is.element(i, sametitle) == FALSE)
{
names(seq)[i] <- names(base)[grep(names(seq)[i],names(base))]
}
i = i + 1
}
write.dna(seq, "NSP2C.fas.labelfixed.longseq", format = "fasta")
library("ape")
seq <- read.dna("NSP3C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
#names(seq)
base <- read.dna("NSP3Cr.fas",format="fasta",as.matrix=FALSE)
#names(base)
i=1
sametitle <- match(names(base),names(seq))
while (i < 101)
{
if (is.element(i, sametitle) == FALSE)
{
names(seq)[i] <- names(base)[grep(names(seq)[i],names(base))]
}
i = i + 1
}
write.dna(seq, "NSP3C.fas.labelfixed.longseq", format = "fasta")
library("ape")
seq <- read.dna("NSP4C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
#names(seq)
base <- read.dna("NSP4Cr.fas",format="fasta",as.matrix=FALSE)
#names(base)
i=1
sametitle <- match(names(base),names(seq))
while (i < 101)
{
if (is.element(i, sametitle) == FALSE)
{
names(seq)[i] <- names(base)[grep(names(seq)[i],names(base))]
}
i = i + 1
}
write.dna(seq, "NSP4C.fas.labelfixed.longseq", format = "fasta")
library("ape")
seq <- read.dna("NSP5C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
#names(seq)
base <- read.dna("NSP5Cr.fas",format="fasta",as.matrix=FALSE)
#names(base)
i=1
sametitle <- match(names(base),names(seq))
while (i < 101)
{
if (is.element(i, sametitle) == FALSE)
{
names(seq)[i] <- names(base)[grep(names(seq)[i],names(base))]
}
i = i + 1
}
write.dna(seq, "NSP5C.fas.labelfixed.longseq", format = "fasta")
library("ape")
seq <- read.dna("VP1C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
#names(seq)
base <- read.dna("VP1Cr.fas",format="fasta",as.matrix=FALSE)
#names(base)
i=1
sametitle <- match(names(base),names(seq))
while (i < 101)
{
if (is.element(i, sametitle) == FALSE)
{
names(seq)[i] <- names(base)[grep(names(seq)[i],names(base))]
}
i = i + 1
}
write.dna(seq, "VP1C.fas.labelfixed.longseq", format = "fasta")
library("ape")
seq <- read.dna("VP2C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
#names(seq)
base <- read.dna("VP2Cr.fas",format="fasta",as.matrix=FALSE)
#names(base)
i=1
sametitle <- match(names(base),names(seq))
while (i < 101)
{
if (is.element(i, sametitle) == FALSE)
{
names(seq)[i] <- names(base)[grep(names(seq)[i],names(base))]
}
i = i + 1
}
write.dna(seq, "VP2C.fas.labelfixed.longseq", format = "fasta")
library("ape")
seq <- read.dna("VP3C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
#names(seq)
base <- read.dna("VP3Cr.fas",format="fasta",as.matrix=FALSE)
#names(base)
i=1
sametitle <- match(names(base),names(seq))
while (i < 101)
{
if (is.element(i, sametitle) == FALSE)
{
names(seq)[i] <- names(base)[grep(names(seq)[i],names(base))]
}
i = i + 1
}
write.dna(seq, "VP3C.fas.labelfixed.longseq", format = "fasta")
library("ape")
seq <- read.dna("VP4C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
#names(seq)
base <- read.dna("VP4Cr.fas",format="fasta",as.matrix=FALSE)
#names(base)
i=1
sametitle <- match(names(base),names(seq))
while (i < 101)
{
if (is.element(i, sametitle) == FALSE)
{
names(seq)[i] <- names(base)[grep(names(seq)[i],names(base))]
}
i = i + 1
}
write.dna(seq, "VP4C.fas.labelfixed.longseq", format = "fasta")
library("ape")
seq <- read.dna("VP6C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
#names(seq)
base <- read.dna("VP6Cr.fas",format="fasta",as.matrix=FALSE)
#names(base)
i=1
sametitle <- match(names(base),names(seq))
while (i < 101)
{
if (is.element(i, sametitle) == FALSE)
{
names(seq)[i] <- names(base)[grep(names(seq)[i],names(base))]
}
i = i + 1
}
write.dna(seq, "VP6C.fas.labelfixed.longseq", format = "fasta")
library("ape")
seq <- read.dna("VP6C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
#names(seq)
base <- read.dna("VP6Cr.fas",format="fasta",as.matrix=FALSE)
#names(base)
i=1
sametitle <- match(names(base),names(seq))
while (i < 101)
{
if (is.element(i, sametitle) == FALSE)
{
names(seq)[i] <- names(base)[grep(names(seq)[i],names(base))]
}
i = i + 1
}
write.dna(seq, "VP6C.fas.labelfixed.longseq", format = "fasta")
library("ape")
seq <- read.dna("VP7C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
#names(seq)
base <- read.dna("VP7Cr.fas",format="fasta",as.matrix=FALSE)
#names(base)
i=1
sametitle <- match(names(base),names(seq))
while (i < 101)
{
if (is.element(i, sametitle) == FALSE)
{
names(seq)[i] <- names(base)[grep(names(seq)[i],names(base))]
}
i = i + 1
}
write.dna(seq, "VP7C.fas.labelfixed.longseq", format = "fasta")
library("ape")
seq <- read.dna("VP7C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
#names(seq)
base <- read.dna("VP7Cr.fas",format="fasta",as.matrix=FALSE)
#names(base)
i=1
sametitle <- match(names(base),names(seq))
while (i < 101)
{
if (is.element(i, sametitle) == FALSE)
{
names(seq)[i] <- names(base)[grep(names(seq)[i],names(base))]
}
i = i + 1
}
write.dna(seq, "VP7C.fas.labelfixed.longseq", format = "fasta")
seq <- read.dna("VP6C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
base <- read.dna("VP6Cr.fas",format="fasta",as.matrix=FALSE)
names(base)
#names(seq)
library("ape")
seq <- read.dna("VP6C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
#names(seq)
base <- read.dna("VP6Cr.fas",format="fasta",as.matrix=FALSE)
#names(base)
i=1
sametitle <- match(names(base),names(seq))
while (i < 1000)
{
if (is.element(i, sametitle) == FALSE)
{
names(seq)[i] <- names(base)[grep(names(seq)[i],names(base))]
}
i = i + 1
}
write.dna(seq, "VP6C.fas.labelfixed.longseq", format = "fasta")
library("ape")
seq <- read.dna("VP7C.fas.nonn.orf.revalign.dedup.trimorf.longseq",format="fasta",as.matrix=FALSE)
#names(seq)
base <- read.dna("VP7Cr.fas",format="fasta",as.matrix=FALSE)
#names(base)
i=1
sametitle <- match(names(base),names(seq))
while (i < 1000)
{
if (is.element(i, sametitle) == FALSE)
{
names(seq)[i] <- names(base)[grep(names(seq)[i],names(base))]
}
i = i + 1
}
write.dna(seq, "VP7C.fas.labelfixed.longseq", format = "fasta")
library("ape")
library("Hmisc")
library("XML")
#Define main function
#Inputs:
# ~ seqs - sequences in matrix and character format
# ~ outfile - name to give to output files (will be appended with .log and .trees)
getBEASTxml<-function(seqs,outfile){
options(scipen=999)
nseqs<-dim(seqs)[1] #Get total number of sequences
nam<-rownames(seqs) #Get names of sequences
# read the dates from the sequence names
dates.rough<-unlist(lapply(strsplit(rownames(seqs),"_",fixed=T),"[",4))
year<-as.numeric(unlist(lapply(strsplit(dates.rough,"-",fixed=T),"[",1)))
month<-as.numeric(unlist(lapply(strsplit(dates.rough,"-",fixed=T),"[",2)))
day<-as.numeric(unlist(lapply(strsplit(dates.rough,"-",fixed=T),"[",3)))
precision<-array(0,length(dates.rough))
dates<-array(0,length(dates.rough))
if(length(which(is.na(year)))>0){
taxa.noyear<-which(is.na(year))
precision[taxa.noyear]<-NA
dates[taxa.noyear]<-1950
}else{
taxa.noyear<-NA
}
if(length(intersect(which(year!="NULL"),which(is.na(month))))>0){
these.dates<-intersect(which(year!="NULL"),which(is.na(month)))
precision[these.dates]<-1.0
dates[these.dates]<-year[these.dates]
}
if(length(intersect(which(!is.na(month)),which(is.na(day))))>0){
these.dates<-intersect(which(!is.na(month)),which(is.na(day)))
precision[these.dates]<-monthDays(as.Date(paste(year[these.dates],month[these.dates],"01",sep="-")))/(yearDays(as.Date(paste(year[these.dates],month[these.dates],"01",sep="-")))+1)
dates[these.dates]<-year[these.dates]+difftime(paste(year[these.dates],month[these.dates],"01",sep="-"),paste(year[these.dates],"01","01",sep="-"),unit="days")/(yearDays(as.Date(paste(year[these.dates],month[these.dates],"01",sep="-")))+1)
}
if(length(which(!is.na(day)))>0){
taxa.nosampling<-which(!is.na(day))
precision[taxa.nosampling]<-NA
dates[taxa.nosampling]<-year[taxa.nosampling]+difftime(paste(year[taxa.nosampling],month[taxa.nosampling],day[taxa.nosampling],sep="-"),paste(year[taxa.nosampling],"01","01",sep="-"),unit="days")/(yearDays(as.Date(paste(year[taxa.nosampling],month[taxa.nosampling],"01",sep="-")))+1)
}else{
taxa.nosampling<-NA
}
need.precision<-c(taxa.nosampling,taxa.noyear)
need.precision<-need.precision[!is.na(need.precision)]
taxa.sampling<-c(1:length(dates.rough))[-need.precision]
template<-xmlTreeParse("Make_xml.xml",getDTD=F,useInternalNodes=T)
rootNode<-xmlRoot(template) #get root
#Add taxon names
taxa<-rootNode[["taxa"]]
if(!is.na(taxa.nosampling[1])){
for(i in c(taxa.nosampling)){
taxon<-addChildren(taxa,newXMLNode("taxon",newXMLNode("date",attrs=c(value=dates[i],direction="forwards",units="years")),attrs=c(id=nam[i])))
}
}
if(!is.na(taxa.noyear[1])){
for(i in c(taxa.noyear)){
taxon<-addChildren(taxa,newXMLNode("taxon",newXMLNode("date",attrs=c(value=dates[i],direction="forwards",units="years")),attrs=c(id=nam[i])))
}
}
for(i in taxa.sampling){
taxon<-addChildren(taxa,newXMLNode("taxon",newXMLNode("date",attrs=c(value=dates[i],direction="forwards",units="years",precision=precision[i])),attrs=c(id=nam[i])))
}
#Add alignment
alignment<-rootNode[["alignment"]]
if(!is.na(taxa.nosampling[1])){
for(i in c(taxa.nosampling)){
sequence<-addChildren(alignment,newXMLNode("sequence",newXMLNode("taxon",attrs=c(idref=nam[i])),newXMLTextNode(paste(toupper(seqs[i,]),collapse=""))))
}
}
if(!is.na(taxa.noyear[1])){
for(i in c(taxa.noyear)){
sequence<-addChildren(alignment,newXMLNode("sequence",newXMLNode("taxon",attrs=c(idref=nam[i])),newXMLTextNode(paste(toupper(seqs[i,]),collapse=""))))
}
}
for(i in taxa.sampling){
sequence<-addChildren(alignment,newXMLNode("sequence",newXMLNode("taxon",attrs=c(idref=nam[i])),newXMLTextNode(paste(toupper(seqs[i,]),collapse=""))))
}
treeModel<-rootNode[["treeModel"]]
#Add leaf heights for tips with missing date information
if(!is.na(taxa.sampling[1])){
for(i in c(taxa.sampling)){
addChildren(treeModel,newXMLNode("leafHeight",newXMLNode("parameter",attrs=c(id=paste0("age(",nam[i],")"))),attrs=c(taxon=nam[i])))
}
}
if(!is.na(taxa.noyear[1])){
for(i in c(taxa.noyear)){
addChildren(treeModel,newXMLNode("leafHeight",newXMLNode("parameter",attrs=c(id=paste0("age(",nam[i],")"))),attrs=c(taxon=nam[i])))
}
}
#Change number of skyride groups to number of coalescent events (i.e. n-1)
skyride.popSize<-rootNode[["gmrfSkyrideLikelihood"]][["populationSizes"]]
skyride.groupSize<-rootNode[["gmrfSkyrideLikelihood"]][["groupSizes"]]
addAttributes(skyride.popSize[["parameter"]],.attrs=c(dimension=nseqs-1))
addAttributes(skyride.groupSize[["parameter"]],.attrs=c(dimension=nseqs-1))
# add sampling operators
operators<-rootNode[["operators"]]
if(length(taxa.sampling)>0){
for(i in taxa.sampling){
addChildren(operators,newXMLNode("uniformOperator",newXMLNode("parameter",attrs=c(idref=paste0("age(",nam[i],")"))),attrs=c(weight="1")))
}
}
if(!is.na(taxa.noyear[1])){
for(i in taxa.noyear){
addChildren(operators,newXMLNode("uniformOperator",newXMLNode("parameter",attrs=c(idref=paste0("age(",nam[i],")"))),attrs=c(weight="1")))
}
}
# edit priors for sampling times
mcmc<-rootNode[["mcmc"]]
addAttributes(mcmc,.attrs=c(operatorAnalysis=paste0(outfile,".ops.txt")))
if(!is.na(taxa.noyear[1])){
prior<-rootNode[["mcmc"]][["posterior"]][["prior"]]
for(i in taxa.noyear){
addChildren(prior,newXMLNode("uniformPrior",newXMLNode("parameter",attrs=c(idref=paste0("age(",nam[i],")"))),attrs=c(lower="0.0",upper="100.0")))
}
}
# edit name of log file
logfile<-rootNode[["mcmc"]][[6]]
addAttributes(logfile,.attrs=c(fileName=paste0(outfile,".log.txt")))
if(!is.na(taxa.noyear[1])){
for(i in c(taxa.noyear)){
addChildren(logfile,newXMLNode("parameter",attrs=c(idref=paste0("age(",nam[i],")"))))
}
}
#   # log sampled tip dates
#   if(!is.na(taxa.sampling[1])){
#     for(i in c(taxa.sampling)){
#       addChildren(logfile,newXMLNode("parameter",attrs=c(idref=paste0("age(",nam[i],")"))))
#     }
#   }
# edit name of trees file
treefile<-rootNode[["mcmc"]][[8]]
addAttributes(treefile,.attrs=c(fileName=paste0(outfile,".trees.txt")))
# write out xml
saveXML(rootNode, file=paste(outfile,".xml",sep=""), prefix = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n")
}
files<-dir(,"*.longseq") #get all files in folder of .fa type
for(i in files){
seqs<-read.dna(i,format="fasta") #read in sequences
outfile<-gsub(".longseq","",i) #names output files after original filenames, removing the .fa
getBEASTxml(seqs,outfile)
}
